<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.universal.persistence.mapper.IoTProductMapper">
  <resultMap id="BaseResultMap" type="cn.universal.persistence.entity.IoTProduct">
    <!--
      WARNING - @mbg.generated
    -->
    <result column="id" jdbcType="BIGINT" property="id"/>
    <result column="product_id" jdbcType="VARCHAR" property="productId"/>
    <result column="product_key" jdbcType="VARCHAR" property="productKey"/>
    <result column="product_secret" jdbcType="VARCHAR" property="productSecret"/>
    <result column="third_platform" jdbcType="VARCHAR" property="thirdPlatform"/>
    <result column="third_configuration" jdbcType="VARCHAR" property="thirdConfiguration"/>
    <result column="company_no" jdbcType="VARCHAR" property="companyNo"/>
    <result column="classified_id" jdbcType="VARCHAR" property="classifiedId"/>
    <result column="network_union_id" jdbcType="VARCHAR" property="networkUnionId"/>
    <result column="device_node" jdbcType="VARCHAR" property="deviceNode"/>
    <result column="gw_product_key" jdbcType="VARCHAR" property="gwProductKey"/>
    <result column="classified_name" jdbcType="VARCHAR" property="classifiedName"/>
    <result column="message_protocol" jdbcType="VARCHAR" property="messageProtocol"/>
    <result column="name" jdbcType="VARCHAR" property="name"/>
    <result column="creator_id" jdbcType="VARCHAR" property="creatorId"/>
    <result column="state" jdbcType="TINYINT" property="state"/>
    <result column="describe" jdbcType="VARCHAR" property="describe"/>
    <result column="store_policy" jdbcType="VARCHAR" property="storePolicy"/>
    <result column="transport_protocol" jdbcType="VARCHAR" property="transportProtocol"/>
    <result column="photo_url" jdbcType="VARCHAR" property="photoUrl"/>
    <result column="create_time" jdbcType="BIGINT" property="createTime"/>
    <result column="configuration" jdbcType="LONGVARCHAR" property="configuration"/>
    <result column="store_policy_configuration" jdbcType="LONGVARCHAR"
      property="storePolicyConfiguration"/>
    <result column="metadata" jdbcType="LONGVARCHAR" property="metadata"/>
    <result column="third_down_request" jdbcType="LONGVARCHAR" property="thirdDownRequest"/>
    <result column="instance" jdbcType="VARCHAR" property="instance"/>
    <result column="is_deleted" jdbcType="TINYINT" property="isDeleted"/>
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
  </resultMap>
  <resultMap id="productVoMap" type="cn.universal.persistence.entity.vo.IoTProductVO"
    extends="BaseResultMap">
    <result column="devNum" jdbcType="INTEGER" property="devNum"/>
    <result column="type" jdbcType="INTEGER" property="type"/>

  </resultMap>
  <select id="openAPIProductList" resultMap="productVoMap">
    SELECT * FROM iot_product
    <where>
      `state` =0
      <if test="deviceNode!=null and deviceNode!=''">
        AND device_node = #{deviceNode}
      </if>
      <if test="productName!=null and productName!=''">
        AND `name` like '%${productName}%'
      </if>
      <if test="transportProtocol!=null and transportProtocol!=''">
        AND a.transport_protocol = #{transportProtocol}
      </if>
      <if test="productId!=null and productId!=''">
        AND product_id = #{productId}
      </if>
      <if test="companyNo!=null and companyNo!=''">
        AND company_no like '%${companyNo}%'
      </if>
    </where>

  </select>
  <select id="apiProductDetail" resultMap="productVoMap">
    SELECT *
    FROM iot_product
    WHERE product_key = #{productKey}
      and `state` = 0
  </select>

  <sql id="selectDevProductVo">
    select id,
           product_id,
           product_key,
           product_secret,
           third_platform,
           third_configuration,
           company_no,
           classified_id,
           configuration,
           network_union_id,
           device_node,
           gw_product_key,
           classified_name,
           message_protocol,
           p.name,
           creator_id,
           p.describe,
           store_policy,
           store_policy_configuration,
           transport_protocol,
           photo_url,
           metadata,
           create_time,
           state
    from iot_product p
  </sql>

  <select id="selectDevProductList" parameterType="cn.universal.persistence.entity.IoTProduct"
    resultMap="BaseResultMap">
    <include refid="selectDevProductVo"/>
    <where>
      <if test="productId != null  and productId != ''">and product_id = #{productId}</if>
      <if test="productKey != null  and productKey != ''">and product_key like concat('%',
        #{productKey}, '%')
      </if>
      <if test="productSecret != null  and productSecret != ''">and product_secret =
        #{productSecret}
      </if>
      <if test="thirdPlatform != null  and thirdPlatform != ''">and third_platform like concat('%',
        #{thirdPlatform}, '%')
      </if>
      <if test="thirdConfiguration != null  and thirdConfiguration != ''">and third_configuration =
        #{thirdConfiguration}
      </if>
      <if test="companyNo != null  and companyNo != ''">and company_no like concat('%',
        #{companyNo}, '%')
      </if>
      <if test="classifiedId != null  and classifiedId != ''">and classified_id = #{classifiedId}
      </if>
      <if test="configuration != null  and configuration != ''">and configuration =
        #{configuration}
      </if>
      <if test="networkUnionId != null  and networkUnionId != ''">and network_union_id =
        #{networkUnionId}
      </if>
      <if test="deviceNode != null  and deviceNode != ''">and device_node = #{deviceNode}</if>
      <if test="gwProductKey != null  and gwProductKey != ''">and gw_product_key = #{gwProductKey}
      </if>
      <if test="classifiedName != null  and classifiedName != ''">and classified_name like
        concat('%', #{classifiedName}, '%')
      </if>
      <if test="messageProtocol != null  and messageProtocol != ''">and message_protocol =
        #{messageProtocol}
      </if>
      <if test="name != null  and name != ''">and p.name like concat('%', #{name}, '%')</if>
      <if test="creatorId != null  and creatorId != ''">and creator_id = #{creatorId}</if>
      <if test="describe != null  and describe != ''">and p.describe = #{describe}</if>
      <if test="storePolicy != null  and storePolicy != ''">and store_policy = #{storePolicy}</if>
      <if test="storePolicyConfiguration != null  and storePolicyConfiguration != ''">and
        store_policy_configuration = #{storePolicyConfiguration}
      </if>
      <if test="transportProtocol != null  and transportProtocol != ''">and transport_protocol like
        concat('%', #{transportProtocol}, '%')
      </if>
      <if test="photoUrl != null  and photoUrl != ''">and photo_url = #{photoUrl}</if>
      <if test="metadata != null  and metadata != ''">and metadata = #{metadata}</if>
      <if test="state != null  and state != ''">and state = #{state}</if>
    </where>
    ORDER BY id desc
  </select>

  <select id="selectDevProductV2List" parameterType="cn.universal.persistence.query.IoTProductQuery"
    resultMap="productVoMap">
    SELECT
    a.id,
    a.product_id,
    a.product_key,
    a.third_platform,
    a.third_configuration,
    a.company_no,
    a.classified_id,
    a.configuration,
    a.network_union_id,
    a.device_node,
    a.message_protocol,
    a.`name`,
    a.creator_id,
    a.`describe`,
    a.store_policy,
    a.store_policy_configuration,
    a.transport_protocol,
    a.photo_url,
    a.create_time,
    a.state,
    count( b.id ) AS devNum
    FROM
    iot_product a
    LEFT JOIN iot_device b ON a.product_key = b.product_key
    <where>
      <if test="productId != null  and productId != ''">and a.product_id = #{productId}</if>
      <if test="productKey != null  and productKey != ''">and a.product_key like concat('%',
        #{productKey}, '%')
      </if>
      <if test="thirdPlatform != null  and thirdPlatform != ''">and a.third_platform like
        concat('%',
        #{thirdPlatform}, '%')
      </if>
      <if test="networkUnionId != null  and networkUnionId != ''">and a.network_union_id =
        #{networkUnionId}
      </if>
      <if test="deviceNode != null  and deviceNode != ''">and a.device_node = #{deviceNode}</if>
      <if test="gwProductKey != null  and gwProductKey != ''">and a.gw_product_key =
        #{gwProductKey}
      </if>
      <if test="classifiedId != null  and classifiedId != ''">and classified_id = #{classifiedId}
      </if>
      <if test="classifiedName != null  and classifiedName != ''">and a.classified_name like
        concat('%', #{classifiedName}, '%')
      </if>
      <if test="companyNo != null  and companyNo != ''">and a.company_no like
        concat('%', #{companyNo}, '%')
      </if>
      <if test="messageProtocol != null  and messageProtocol != ''">and a.message_protocol =
        #{messageProtocol}
      </if>
      <if test="name != null  and name != ''">and a.`name` like concat('%', #{name}, '%')</if>
      <if test="hasDevice==true">and b.creator_id = #{creatorId}</if>
      <if test="self==true">and a.creator_id = #{creatorId}</if>
      <if test="describe != null  and describe != ''">and a.`describe` = #{describe}</if>
      <if test="storePolicy != null  and storePolicy != ''">and a.store_policy = #{storePolicy}</if>
      <if test="transportProtocol != null  and transportProtocol != ''">and a.transport_protocol
        like
        concat('%', #{transportProtocol}, '%')
      </if>
      <if test="state != null  and state != ''">and a.`state` = #{state}</if>

    </where>
    GROUP BY a.id DESC
    <if test="hasDevice==true">
      HAVING
      count( b.id )> 0
    </if>

  </select>

  <select id="selectDevProductV3List" parameterType="cn.universal.persistence.query.IoTProductQuery"
    resultMap="productVoMap">
    SELECT
    a.id,
    a.tags,
    a.product_id,
    a.product_key,
    a.third_platform,
    a.company_no,
    a.device_node,
    a.`name`,
    a.creator_id,
    a.transport_protocol,
    a.photo_url,
    a.create_time,
    a.state
    FROM
    iot_product a
    <where>
      1=1
      <if test="productId != null  and productId != ''">and a.product_id = #{productId}</if>
      <if test="productKey != null  and productKey != ''">and a.product_key like concat('%',
        #{productKey}, '%')
      </if>
      <if test="thirdPlatform != null  and thirdPlatform != ''">and a.third_platform like
        concat('%',
        #{thirdPlatform}, '%')
      </if>
      <if test="networkUnionId != null  and networkUnionId != ''">and a.network_union_id =
        #{networkUnionId}
      </if>
      <if test="deviceNode != null  and deviceNode != ''">and a.device_node = #{deviceNode}</if>
      <if test="gwProductKey != null  and gwProductKey != ''">and a.gw_product_key =
        #{gwProductKey}
      </if>
      <if test="classifiedId != null  and classifiedId != ''">and a.classified_id = #{classifiedId}
      </if>
      <if test="classifiedName != null  and classifiedName != ''">and a.classified_name like
        concat('%', #{classifiedName}, '%')
      </if>
      <if test="companyNo != null  and companyNo != ''">and a.company_no like
        concat('%', #{companyNo}, '%')
      </if>
      <if test="messageProtocol != null  and messageProtocol != ''">and a.message_protocol =
        #{messageProtocol}
      </if>
      <if test="name != null  and name != ''">and (a.`name` like concat('%', #{name}, '%') or
        a.product_key LIKE
        concat( '%', #{name}, '%' ))
      </if>
      <if test="self==true">and a.creator_id = #{creatorId}</if>
      <if test="describe != null  and describe != ''">and a.`describe` = #{describe}</if>
      <if test="storePolicy != null  and storePolicy != ''">and a.store_policy = #{storePolicy}</if>
      <if test="transportProtocol != null  and transportProtocol != ''">and a.transport_protocol
        like
        concat('%', #{transportProtocol}, '%')
      </if>
      <if test="`state` != null  and `state` != ''">and a.`state` = #{state}</if>
      <if test="tags !=null">
        and
        <foreach collection="tags" item="tag" close=")" open="(" separator=" and ">
          find_in_set(#{tag},a.tags)
        </foreach>
      </if>
    </where>
    GROUP BY a.id
    ORDER BY a.id DESC
  </select>


  <select id="selectAllDevProductV2List"
    parameterType="cn.universal.persistence.query.IoTProductQuery"
    resultType="cn.universal.persistence.entity.vo.IoTProductExportVO">
    SELECT
    a.id,
    a.product_id,
    a.product_key,
    a.third_platform,
    a.third_configuration,
    a.company_no,
    a.classified_id,
    a.configuration,
    a.network_union_id,
    a.device_node,
    a.message_protocol,
    a.`name`,
    a.creator_id,
    a.`describe`,
    a.store_policy,
    a.store_policy_configuration,
    a.transport_protocol,
    a.photo_url,
    a.create_time,
    a.state,
    a.metadata,
    a.third_down_request,
    COUNT(b.id) AS devNum,
    ANY_VALUE(p.`name`) AS protocolName2,
    ANY_VALUE(p.`state`) AS protocolState,
    ANY_VALUE(p.type) AS protocolType,
    ANY_VALUE(p.configuration) AS protocolConfiguration,
    ANY_VALUE(p.example) AS protocolExample,
    ANY_VALUE(n.type) AS networkType,
    ANY_VALUE(n.name) AS networkName,
    ANY_VALUE(n.description) AS networkDescription,
    ANY_VALUE(n.configuration) AS networkConfiguration,
    ANY_VALUE(n.state) AS networkState
    FROM iot_product a
    LEFT JOIN iot_device b ON a.product_key = b.product_key
    LEFT JOIN iot_device_protocol p ON a.product_key = p.id
    LEFT JOIN iot_network n ON n.union_id = a.product_key
    <where>
      <!-- 采用V3的简洁条件写法 -->
      <if test="id != null and id != ''">AND a.id = #{id}</if>
      <if test="productId != null and productId != ''">AND a.product_id = #{productId}</if>
      <if test="productKey != null and productKey != ''">
        AND a.product_key LIKE CONCAT('%', #{productKey}, '%')
      </if>
      <if test="name != null and name != ''">
        AND (a.`name` LIKE CONCAT('%', #{name}, '%') OR a.product_key LIKE CONCAT('%', #{name},
        '%'))
      </if>
      <if test="self == true">AND a.creator_id = #{creatorId}</if>
      <!-- 保留V2特有条件 -->
      <if test="hasDevice == true">AND b.creator_id = #{creatorId}</if>
    </where>
    GROUP BY a.id  <!-- 确保所有非聚合字段用ANY_VALUE()处理 -->
    <if test="hasDevice == true">HAVING COUNT(b.id) > 0</if>
    ORDER BY a.create_time DESC
  </select>

  <select id="selectDevProductById" parameterType="String" resultMap="productVoMap">
    select p.id,
           p.product_id,
           p.tags,
           p.product_key,
           p.product_secret,
           p.third_platform,
           p.third_configuration,
           p.company_no,
           p.classified_id,
           p.configuration,
           p.network_union_id,
           p.device_node,
           p.gw_product_key,
           p.classified_name,
           p.message_protocol,
           p.`name`,
           p.creator_id,
           p.`describe`,
           p.store_policy,
           p.store_policy_configuration,
           p.transport_protocol,
           p.photo_url,
           p.metadata,
           p.create_time,
           p.state,
           t.type
    from iot_product p
           LEFT JOIN iot_device_protocol t on p.product_key = t.id
    where p.id = #{id}
  </select>

  <insert id="insertDevProduct" parameterType="cn.universal.persistence.entity.IoTProduct"
    useGeneratedKeys="true" keyProperty="id">
    insert into iot_product
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="productId != null and productId != ''">product_id,</if>
      <if test="productKey != null">product_key,</if>
      <if test="productSecret != null">product_secret,</if>
      <if test="thirdPlatform != null">third_platform,</if>
      <if test="thirdConfiguration != null">third_configuration,</if>
      <if test="companyNo != null">company_no,</if>
      <if test="classifiedId != null">classified_id,</if>
      <if test="configuration != null">configuration,</if>
      <if test="networkUnionId != null">network_union_id,</if>
      <if test="deviceNode != null">device_node,</if>
      <if test="gwProductKey != null">gw_product_key,</if>
      <if test="classifiedName != null">classified_name,</if>
      <if test="messageProtocol != null">message_protocol,</if>
      <if test="name != null">`name`,</if>
      <if test="creatorId != null">creator_id,</if>
      <if test="describe != null">`describe`,</if>
      <if test="storePolicy != null">store_policy,</if>
      <if test="storePolicyConfiguration != null">store_policy_configuration,</if>
      <if test="transportProtocol != null">transport_protocol,</if>
      <if test="photoUrl != null">photo_url,</if>
      <if test="metadata != null">metadata,</if>
      <if test="createTime != null">create_time,</if>
      <if test="state != null">state,</if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="productId != null and productId != ''">#{productId},</if>
      <if test="productKey != null">#{productKey},</if>
      <if test="productSecret != null">#{productSecret},</if>
      <if test="thirdPlatform != null">#{thirdPlatform},</if>
      <if test="thirdConfiguration != null">#{thirdConfiguration},</if>
      <if test="companyNo != null">#{companyNo},</if>
      <if test="classifiedId != null">#{classifiedId},</if>
      <if test="configuration != null">#{configuration},</if>
      <if test="networkUnionId != null">#{networkUnionId},</if>
      <if test="deviceNode != null">#{deviceNode},</if>
      <if test="gwProductKey != null">#{gwProductKey},</if>
      <if test="classifiedName != null">#{classifiedName},</if>
      <if test="messageProtocol != null">#{messageProtocol},</if>
      <if test="name != null">#{name},</if>
      <if test="creatorId != null">#{creatorId},</if>
      <if test="describe != null">#{describe},</if>
      <if test="storePolicy != null">#{storePolicy},</if>
      <if test="storePolicyConfiguration != null">#{storePolicyConfiguration},</if>
      <if test="transportProtocol != null">#{transportProtocol},</if>
      <if test="photoUrl != null">#{photoUrl},</if>
      <if test="metadata != null">#{metadata},</if>
      <if test="createTime != null">#{createTime},</if>
      <if test="state != null">#{state},</if>
    </trim>
  </insert>

  <update id="updateDevProduct" parameterType="cn.universal.persistence.entity.IoTProduct">
    update iot_product p
    <trim prefix="SET" suffixOverrides=",">
      <if test="productId != null and productId != ''">product_id = #{productId},</if>
      <if test="productKey != null">product_key = #{productKey},</if>
      <if test="productSecret != null">product_secret = #{productSecret},</if>
      <if test="thirdPlatform != null">third_platform = #{thirdPlatform},</if>
      <if test="thirdConfiguration != null">third_configuration = #{thirdConfiguration},</if>
      <if test="companyNo != null">company_no = #{companyNo},</if>
      <if test="classifiedId != null">classified_id = #{classifiedId},</if>
      <if test="configuration != null">configuration = #{configuration},</if>
      <if test="networkUnionId != null">network_union_id = #{networkUnionId},</if>
      <if test="deviceNode != null">device_node = #{deviceNode},</if>
      <if test="gwProductKey != null">gw_product_key = #{gwProductKey},</if>
      <if test="classifiedName != null">classified_name = #{classifiedName},</if>
      <if test="messageProtocol != null">message_protocol = #{messageProtocol},</if>
      <if test="name != null">p.name = #{name},</if>
      <if test="creatorId != null">creator_id = #{creatorId},</if>
      <if test="describe != null">p.describe = #{describe},</if>
      <if test="storePolicy != null">store_policy = #{storePolicy},</if>
      <if test="storePolicyConfiguration != null">store_policy_configuration =
        #{storePolicyConfiguration},
      </if>
      <if test="transportProtocol != null">transport_protocol = #{transportProtocol},</if>
      <if test="photoUrl != null">photo_url = #{photoUrl},</if>
      <if test="metadata != null">metadata = cast(#{metadata} as json),</if>
      <if test="createTime != null">create_time = #{createTime},</if>
      <if test="state != null">state = #{state},</if>
      <if test="tags != null">tags = #{tags},</if>
    </trim>
    where id = #{id}
  </update>

  <delete id="deleteDevProductById" parameterType="String">
    delete
    from iot_product
    where id = #{id}
  </delete>

  <delete id="deleteDevProductByIds" parameterType="String">
    delete from iot_product where id in
    <foreach item="id" collection="array" open="(" separator="," close=")">
      #{id}
    </foreach>
  </delete>

  <select id="getProductByProductKey" resultMap="BaseResultMap">
    SELECT *
    FROM iot_product
    WHERE product_key = #{productKey}
      and `state` = 0
  </select>

  <select id="getModelByProductKey" parameterType="String"
    resultType="cn.universal.persistence.entity.vo.IoTDeviceModelVO">
    SELECT *
    FROM iot_device_model
    WHERE product_key = #{productKey}
  </select>

  <update id="insertMetadata" parameterType="cn.universal.persistence.entity.bo.IoTProductBO">
    update iot_product
    set metadata=json_array_append(metadata, #{path}, cast(#{jsonStr} as json))
    where product_key = #{productKey}
  </update>
  <update id="deleteMetadata" parameterType="cn.universal.persistence.entity.bo.IoTProductBO">
    update iot_product
    set metadata=json_remove(metadata, replace(
      replace(json_search(metadata, 'one', #{oldId}, null, #{path}), '"', ''), '.id', ''))
    where product_key = #{productKey}
  </update>
  <update id="updateMetadata" parameterType="cn.universal.persistence.entity.bo.IoTProductBO">
    update iot_product
    set metadata=json_set(metadata, replace(
      replace(json_search(metadata, 'one', #{oldId}, null, #{path}), '"', ''), '.id', ''),
                          cast(#{jsonStr} as json))
    where product_key = #{productKey}
  </update>
  <select id="getMetadata" parameterType="cn.universal.persistence.entity.bo.IoTProductBO"
    resultType="cn.universal.persistence.entity.bo.IoTProductBO">
    select json_extract(metadata, replace(
      replace(json_search(metadata, 'one', #{oldId}, null, #{path}), '"', ''), '.id',
      '')) as jsonStr
    from iot_product
    where product_key = #{productKey}
  </select>
  <select id="selectMetadataByDevId" resultType="String">
    select metadata
    from iot_product dp
           left join iot_device di on di.product_key = dp.product_key
    where di.device_id = #{devId}
  </select>
  <select id="countDevNumberByProductKey" parameterType="String"
    resultType="cn.universal.persistence.entity.vo.IoTProductVO">
    select di.product_key , count(di.id) as devNum
    from iot_device di
    <where>
      <if test="unionId!=null and unionId!=''">
        di.creator_id=#{unionId}
      </if>
    </where>
    group by di.product_key
  </select>

  <select id="selectDevProductAllList"
    resultType="cn.universal.persistence.entity.vo.IoTProductVO">
    select *
    from iot_product
    where state = 0
  </select>
  <select id="selectProductName" resultType="cn.universal.persistence.entity.vo.IoTProductVO">
    select product_key,name from iot_product where product_key in
    <foreach item="id" collection="array" open="(" separator="," close=")">
      #{id}
    </foreach>
  </select>
  <select id="getGatewaySubDeviceList"
    resultType="cn.universal.persistence.entity.vo.IoTProductVO">
    select *
    from iot_product
    where device_node = 'GATEWAY_SUB_DEVICE'
      and state = 0
      and configuration like concat('%', #{productKey}, '%')
  </select>
  <select id="selectNetworkUnionId" resultType="String">
    select network_union_id
    from iot_product
    WHERE product_key = #{productKey}
      AND state = 0
      AND is_deleted = 0
  </select>
  <select id="selectAllEnableNetworkProductKey" resultType="java.lang.String">
    SELECT product_key
    FROM iot_product
    WHERE ((network_union_id is not null and is_deleted = 0 and state = 0))
  </select>
  <select id="countByNetworkUnionId" resultType="int" parameterType="string">
    SELECT COUNT(1)
    FROM iot_product
    WHERE network_union_id = #{networkUnionId}
      AND is_deleted = 0
  </select>

  <select id="searchProductKeyAndName" resultType="map" parameterType="string">
    SELECT product_key, name
    FROM iot_product
    WHERE is_deleted = 0
      AND (product_key LIKE CONCAT('%', #{name}, '%') OR
           name LIKE CONCAT('%', #{name}, '%'))
      LIMIT 20
  </select>

  <update id="updateNetworkUnionIdByProductKey" parameterType="map">
    UPDATE iot_product
    SET network_union_id = #{networkUnionId}
    WHERE product_key = #{productKey}
      AND is_deleted = 0
  </update>

  <select id="findProductKeyByNetworkUnionId" resultType="string" parameterType="string">
    SELECT product_key
    FROM iot_product
    WHERE network_union_id = #{networkUnionId}
      AND is_deleted = 0 LIMIT 1
  </select>
</mapper>